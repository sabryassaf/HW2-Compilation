└──Funcs
    ├──FuncDecl
    │   ├──ID: main
    │   ├──PrimitiveType: int
    │   ├──Formals
    │   └──Statements
    │       ├──Call
    │       │   ├──ID: print
    │       │   └──ExpList
    │       │       └──String: Starting the ultimate FanC test...
    │       ├──VarDecl
    │       │   ├──ID: x
    │       │   ├──PrimitiveType: int
    │       │   └──Num: 10
    │       ├──VarDecl
    │       │   ├──ID: y
    │       │   ├──PrimitiveType: int
    │       │   └──Num: 20
    │       ├──VarDecl
    │       │   ├──ID: z
    │       │   ├──PrimitiveType: int
    │       │   └──Num: 30
    │       ├──VarDecl
    │       │   ├──ID: b1
    │       │   ├──PrimitiveType: byte
    │       │   └──NumB: 1
    │       ├──VarDecl
    │       │   ├──ID: b2
    │       │   ├──PrimitiveType: byte
    │       │   └──NumB: 4
    │       ├──VarDecl
    │       │   ├──ID: flag1
    │       │   ├──PrimitiveType: bool
    │       │   └──Bool: true
    │       ├──VarDecl
    │       │   ├──ID: flag2
    │       │   ├──PrimitiveType: bool
    │       │   └──Bool: false
    │       ├──Call
    │       │   ├──ID: fullTestSuite
    │       │   └──ExpList
    │       │       ├──ID: flag2
    │       │       ├──ID: flag1
    │       │       ├──ID: b2
    │       │       ├──ID: b1
    │       │       ├──ID: z
    │       │       ├──ID: y
    │       │       └──ID: x
    │       ├──Call
    │       │   ├──ID: extendedTests
    │       │   └──ExpList
    │       │       ├──ID: z
    │       │       ├──ID: y
    │       │       └──ID: x
    │       └──Return
    │           └──Num: 0
    ├──FuncDecl
    │   ├──ID: fullTestSuite
    │   ├──PrimitiveType: void
    │   ├──Formals
    │   │   ├──Formal
    │   │   │   ├──ID: flag2
    │   │   │   └──PrimitiveType: bool
    │   │   ├──Formal
    │   │   │   ├──ID: flag1
    │   │   │   └──PrimitiveType: bool
    │   │   ├──Formal
    │   │   │   ├──ID: b2
    │   │   │   └──PrimitiveType: byte
    │   │   ├──Formal
    │   │   │   ├──ID: b1
    │   │   │   └──PrimitiveType: byte
    │   │   ├──Formal
    │   │   │   ├──ID: z
    │   │   │   └──PrimitiveType: int
    │   │   ├──Formal
    │   │   │   ├──ID: y
    │   │   │   └──PrimitiveType: int
    │   │   └──Formal
    │   │       ├──ID: x
    │   │       └──PrimitiveType: int
    │   └──Statements
    │       ├──Call
    │       │   ├──ID: testArithmetic
    │       │   └──ExpList
    │       │       ├──ID: b2
    │       │       ├──ID: b1
    │       │       ├──ID: z
    │       │       ├──ID: y
    │       │       └──ID: x
    │       ├──Call
    │       │   ├──ID: testLogical
    │       │   └──ExpList
    │       │       ├──ID: y
    │       │       ├──ID: x
    │       │       ├──ID: flag2
    │       │       └──ID: flag1
    │       ├──Call
    │       │   ├──ID: testLoops
    │       │   └──ExpList
    │       │       ├──ID: z
    │       │       ├──ID: y
    │       │       └──ID: x
    │       ├──Call
    │       │   ├──ID: testRecursion
    │       │   └──ExpList
    │       │       └──ID: x
    │       ├──Call
    │       │   ├──ID: testNestedFunctions
    │       │   └──ExpList
    │       │       ├──ID: b2
    │       │       ├──ID: b1
    │       │       ├──ID: z
    │       │       ├──ID: y
    │       │       └──ID: x
    │       ├──Call
    │       │   ├──ID: testAdvancedConditionals
    │       │   └──ExpList
    │       │       ├──ID: z
    │       │       ├──ID: y
    │       │       └──ID: x
    │       ├──Call
    │       │   ├──ID: testComplexCalls
    │       │   └──ExpList
    │       │       ├──ID: z
    │       │       ├──ID: y
    │       │       └──ID: x
    │       ├──Call
    │       │   ├──ID: testPrimitiveTypeCasting
    │       │   └──ExpList
    │       └──Call
    │           ├──ID: testLongConditionals
    │           └──ExpList
    │               ├──ID: z
    │               ├──ID: y
    │               ├──ID: x
    │               ├──ID: flag2
    │               └──ID: flag1
    ├──FuncDecl
    │   ├──ID: testArithmetic
    │   ├──PrimitiveType: void
    │   ├──Formals
    │   │   ├──Formal
    │   │   │   ├──ID: b2
    │   │   │   └──PrimitiveType: byte
    │   │   ├──Formal
    │   │   │   ├──ID: b1
    │   │   │   └──PrimitiveType: byte
    │   │   ├──Formal
    │   │   │   ├──ID: z
    │   │   │   └──PrimitiveType: int
    │   │   ├──Formal
    │   │   │   ├──ID: y
    │   │   │   └──PrimitiveType: int
    │   │   └──Formal
    │   │       ├──ID: x
    │   │       └──PrimitiveType: int
    │   └──Statements
    │       ├──VarDecl
    │       │   ├──ID: i
    │       │   ├──PrimitiveType: int
    │       │   └──Num: 0
    │       └──While
    │           ├──RelOp: <
    │           │   ├──ID: i
    │           │   └──Num: 100
    │           └──Statements
    │               ├──VarDecl
    │               │   ├──ID: result
    │               │   ├──PrimitiveType: int
    │               │   └──BinOp: -
    │               │       ├──BinOp: +
    │               │       │   ├──BinOp: -
    │               │       │   │   ├──BinOp: +
    │               │       │   │   │   ├──BinOp: +
    │               │       │   │   │   │   ├──ID: x
    │               │       │   │   │   │   └──BinOp: /
    │               │       │   │   │   │       ├──BinOp: *
    │               │       │   │   │   │       │   ├──ID: y
    │               │       │   │   │   │       │   └──ID: z
    │               │       │   │   │   │       └──BinOp: -
    │               │       │   │   │   │           ├──ID: x
    │               │       │   │   │   │           └──ID: z
    │               │       │   │   │   └──BinOp: *
    │               │       │   │   │       ├──ID: y
    │               │       │   │   │       └──ID: z
    │               │       │   │   └──BinOp: /
    │               │       │   │       ├──ID: x
    │               │       │   │       └──ID: y
    │               │       │   └──BinOp: *
    │               │       │       ├──ID: i
    │               │       │       └──ID: b1
    │               │       └──ID: b2
    │               ├──Assign
    │               │   ├──ID: result
    │               │   └──BinOp: -
    │               │       ├──BinOp: +
    │               │       │   ├──BinOp: *
    │               │       │   │   ├──ID: result
    │               │       │   │   └──BinOp: +
    │               │       │   │       ├──ID: x
    │               │       │   │       └──BinOp: /
    │               │       │   │           ├──ID: y
    │               │       │   │           └──BinOp: -
    │               │       │   │               ├──ID: z
    │               │       │   │               └──BinOp: *
    │               │       │   │                   ├──ID: x
    │               │       │   │                   └──Num: 2
    │               │       │   └──ID: b1
    │               │       └──ID: b2
    │               ├──Call
    │               │   ├──ID: printResult
    │               │   └──ExpList
    │               │       └──ID: result
    │               └──Assign
    │                   ├──ID: i
    │                   └──BinOp: +
    │                       ├──ID: i
    │                       └──Num: 1
    ├──FuncDecl
    │   ├──ID: testLogical
    │   ├──PrimitiveType: void
    │   ├──Formals
    │   │   ├──Formal
    │   │   │   ├──ID: y
    │   │   │   └──PrimitiveType: int
    │   │   ├──Formal
    │   │   │   ├──ID: x
    │   │   │   └──PrimitiveType: int
    │   │   ├──Formal
    │   │   │   ├──ID: flag2
    │   │   │   └──PrimitiveType: bool
    │   │   └──Formal
    │   │       ├──ID: flag1
    │   │       └──PrimitiveType: bool
    │   └──Statements
    │       ├──VarDecl
    │       │   ├──ID: i
    │       │   ├──PrimitiveType: int
    │       │   └──Num: 0
    │       └──While
    │           ├──RelOp: <
    │           │   ├──ID: i
    │           │   └──Num: 50
    │           └──Statements
    │               ├──If
    │               │   ├──Or
    │               │   │   ├──Or
    │               │   │   │   ├──And
    │               │   │   │   │   ├──ID: flag1
    │               │   │   │   │   └──Not
    │               │   │   │   │       └──ID: flag2
    │               │   │   │   └──RelOp: >
    │               │   │   │       ├──ID: x
    │               │   │   │       └──ID: y
    │               │   │   └──RelOp: <
    │               │   │       ├──ID: i
    │               │   │       └──ID: x
    │               │   ├──Statements
    │               │   │   └──Call
    │               │   │       ├──ID: print
    │               │   │       └──ExpList
    │               │   │           ├──ID: i
    │               │   │           └──String: Logical condition passed for i:
    │               │   └──Statements
    │               │       └──Call
    │               │           ├──ID: print
    │               │           └──ExpList
    │               │               ├──ID: i
    │               │               └──String: Logical condition failed for i:
    │               └──Assign
    │                   ├──ID: i
    │                   └──BinOp: +
    │                       ├──ID: i
    │                       └──Num: 1
    ├──FuncDecl
    │   ├──ID: testLoops
    │   ├──PrimitiveType: void
    │   ├──Formals
    │   │   ├──Formal
    │   │   │   ├──ID: z
    │   │   │   └──PrimitiveType: int
    │   │   ├──Formal
    │   │   │   ├──ID: y
    │   │   │   └──PrimitiveType: int
    │   │   └──Formal
    │   │       ├──ID: x
    │   │       └──PrimitiveType: int
    │   └──Statements
    │       ├──VarDecl
    │       │   ├──ID: i
    │       │   ├──PrimitiveType: int
    │       │   └──Num: 0
    │       └──While
    │           ├──RelOp: <
    │           │   ├──ID: i
    │           │   └──Num: 100
    │           └──Statements
    │               ├──VarDecl
    │               │   ├──ID: j
    │               │   ├──PrimitiveType: int
    │               │   └──Num: 0
    │               ├──While
    │               │   ├──RelOp: <
    │               │   │   ├──ID: j
    │               │   │   └──Num: 50
    │               │   └──Statements
    │               │       ├──VarDecl
    │               │       │   ├──ID: temp
    │               │       │   ├──PrimitiveType: int
    │               │       │   └──BinOp: /
    │               │       │       ├──BinOp: +
    │               │       │       │   ├──BinOp: *
    │               │       │       │   │   ├──ID: i
    │               │       │       │   │   └──ID: j
    │               │       │       │   └──ID: z
    │               │       │       └──BinOp: +
    │               │       │           ├──BinOp: -
    │               │       │           │   ├──ID: x
    │               │       │           │   └──ID: y
    │               │       │           └──Num: 1
    │               │       ├──Call
    │               │       │   ├──ID: printResult
    │               │       │   └──ExpList
    │               │       │       └──ID: temp
    │               │       └──Assign
    │               │           ├──ID: j
    │               │           └──BinOp: +
    │               │               ├──ID: j
    │               │               └──Num: 1
    │               └──Assign
    │                   ├──ID: i
    │                   └──BinOp: +
    │                       ├──ID: i
    │                       └──Num: 1
    ├──FuncDecl
    │   ├──ID: recursiveFactorial
    │   ├──PrimitiveType: int
    │   ├──Formals
    │   │   └──Formal
    │   │       ├──ID: n
    │   │       └──PrimitiveType: int
    │   └──Statements
    │       ├──If
    │       │   ├──RelOp: <=
    │       │   │   ├──ID: n
    │       │   │   └──Num: 1
    │       │   └──Return
    │       │       └──Num: 1
    │       └──Return
    │           └──BinOp: *
    │               ├──ID: n
    │               └──Call
    │                   ├──ID: recursiveFactorial
    │                   └──ExpList
    │                       └──BinOp: -
    │                           ├──ID: n
    │                           └──Num: 1
    ├──FuncDecl
    │   ├──ID: recursiveFibonacci
    │   ├──PrimitiveType: int
    │   ├──Formals
    │   │   └──Formal
    │   │       ├──ID: n
    │   │       └──PrimitiveType: int
    │   └──Statements
    │       ├──If
    │       │   ├──RelOp: <=
    │       │   │   ├──ID: n
    │       │   │   └──Num: 1
    │       │   └──Return
    │       │       └──ID: n
    │       └──Return
    │           └──BinOp: +
    │               ├──Call
    │               │   ├──ID: recursiveFibonacci
    │               │   └──ExpList
    │               │       └──BinOp: -
    │               │           ├──ID: n
    │               │           └──Num: 1
    │               └──Call
    │                   ├──ID: recursiveFibonacci
    │                   └──ExpList
    │                       └──BinOp: -
    │                           ├──ID: n
    │                           └──Num: 2
    ├──FuncDecl
    │   ├──ID: testRecursion
    │   ├──PrimitiveType: void
    │   ├──Formals
    │   │   └──Formal
    │   │       ├──ID: n
    │   │       └──PrimitiveType: int
    │   └──Statements
    │       ├──VarDecl
    │       │   ├──ID: i
    │       │   ├──PrimitiveType: int
    │       │   └──Num: 0
    │       └──While
    │           ├──RelOp: <
    │           │   ├──ID: i
    │           │   └──Num: 15
    │           └──Statements
    │               ├──VarDecl
    │               │   ├──ID: fact
    │               │   ├──PrimitiveType: int
    │               │   └──Call
    │               │       ├──ID: recursiveFactorial
    │               │       └──ExpList
    │               │           └──ID: i
    │               ├──VarDecl
    │               │   ├──ID: fib
    │               │   ├──PrimitiveType: int
    │               │   └──Call
    │               │       ├──ID: recursiveFibonacci
    │               │       └──ExpList
    │               │           └──ID: i
    │               ├──Call
    │               │   ├──ID: print
    │               │   └──ExpList
    │               │       ├──ID: fact
    │               │       ├──String: :
    │               │       ├──ID: i
    │               │       └──String: Factorial of
    │               ├──Call
    │               │   ├──ID: print
    │               │   └──ExpList
    │               │       ├──ID: fib
    │               │       ├──String: :
    │               │       ├──ID: i
    │               │       └──String: Fibonacci of
    │               └──Assign
    │                   ├──ID: i
    │                   └──BinOp: +
    │                       ├──ID: i
    │                       └──Num: 1
    ├──FuncDecl
    │   ├──ID: nestedFunctionOne
    │   ├──PrimitiveType: int
    │   ├──Formals
    │   │   ├──Formal
    │   │   │   ├──ID: b
    │   │   │   └──PrimitiveType: int
    │   │   └──Formal
    │   │       ├──ID: a
    │   │       └──PrimitiveType: int
    │   └──Statements
    │       └──Return
    │           └──Call
    │               ├──ID: nestedFunctionTwo
    │               └──ExpList
    │                   ├──BinOp: -
    │                   │   ├──ID: b
    │                   │   └──Num: 1
    │                   └──BinOp: +
    │                       ├──ID: a
    │                       └──Num: 1
    ├──FuncDecl
    │   ├──ID: nestedFunctionTwo
    │   ├──PrimitiveType: int
    │   ├──Formals
    │   │   ├──Formal
    │   │   │   ├──ID: y
    │   │   │   └──PrimitiveType: int
    │   │   └──Formal
    │   │       ├──ID: x
    │   │       └──PrimitiveType: int
    │   └──Statements
    │       └──Return
    │           └──Call
    │               ├──ID: nestedFunctionThree
    │               └──ExpList
    │                   ├──BinOp: +
    │                   │   ├──ID: x
    │                   │   └──ID: y
    │                   └──BinOp: *
    │                       ├──ID: x
    │                       └──ID: y
    ├──FuncDecl
    │   ├──ID: nestedFunctionThree
    │   ├──PrimitiveType: int
    │   ├──Formals
    │   │   ├──Formal
    │   │   │   ├──ID: n
    │   │   │   └──PrimitiveType: int
    │   │   └──Formal
    │   │       ├──ID: m
    │   │       └──PrimitiveType: int
    │   └──Statements
    │       ├──If
    │       │   ├──RelOp: >
    │       │   │   ├──ID: m
    │       │   │   └──ID: n
    │       │   └──Return
    │       │       └──BinOp: -
    │       │           ├──ID: m
    │       │           └──ID: n
    │       └──Return
    │           └──BinOp: +
    │               ├──BinOp: -
    │               │   ├──ID: n
    │               │   └──ID: m
    │               └──Call
    │                   ├──ID: nestedFunctionOne
    │                   └──ExpList
    │                       ├──ID: n
    │                       └──ID: m
    ├──FuncDecl
    │   ├──ID: testNestedFunctions
    │   ├──PrimitiveType: void
    │   ├──Formals
    │   │   ├──Formal
    │   │   │   ├──ID: b2
    │   │   │   └──PrimitiveType: byte
    │   │   ├──Formal
    │   │   │   ├──ID: b1
    │   │   │   └──PrimitiveType: byte
    │   │   ├──Formal
    │   │   │   ├──ID: z
    │   │   │   └──PrimitiveType: int
    │   │   ├──Formal
    │   │   │   ├──ID: y
    │   │   │   └──PrimitiveType: int
    │   │   └──Formal
    │   │       ├──ID: x
    │   │       └──PrimitiveType: int
    │   └──Statements
    │       ├──VarDecl
    │       │   ├──ID: i
    │       │   ├──PrimitiveType: int
    │       │   └──Num: 0
    │       └──While
    │           ├──RelOp: <
    │           │   ├──ID: i
    │           │   └──Num: 50
    │           └──Statements
    │               ├──VarDecl
    │               │   ├──ID: result
    │               │   ├──PrimitiveType: int
    │               │   └──BinOp: +
    │               │       ├──BinOp: +
    │               │       │   ├──Call
    │               │       │   │   ├──ID: nestedFunctionOne
    │               │       │   │   └──ExpList
    │               │       │   │       ├──ID: y
    │               │       │   │       └──BinOp: +
    │               │       │   │           ├──ID: x
    │               │       │   │           └──ID: i
    │               │       │   └──Call
    │               │       │       ├──ID: nestedFunctionTwo
    │               │       │       └──ExpList
    │               │       │           ├──ID: b1
    │               │       │           └──ID: z
    │               │       └──Call
    │               │           ├──ID: nestedFunctionThree
    │               │           └──ExpList
    │               │               ├──BinOp: -
    │               │               │   ├──ID: x
    │               │               │   └──ID: i
    │               │               └──ID: b2
    │               ├──Call
    │               │   ├──ID: printResult
    │               │   └──ExpList
    │               │       └──ID: result
    │               └──Assign
    │                   ├──ID: i
    │                   └──BinOp: +
    │                       ├──ID: i
    │                       └──Num: 1
    ├──FuncDecl
    │   ├──ID: testAdvancedConditionals
    │   ├──PrimitiveType: void
    │   ├──Formals
    │   │   ├──Formal
    │   │   │   ├──ID: z
    │   │   │   └──PrimitiveType: int
    │   │   ├──Formal
    │   │   │   ├──ID: y
    │   │   │   └──PrimitiveType: int
    │   │   └──Formal
    │   │       ├──ID: x
    │   │       └──PrimitiveType: int
    │   └──Statements
    │       ├──VarDecl
    │       │   ├──ID: i
    │       │   ├──PrimitiveType: int
    │       │   └──Num: 0
    │       └──While
    │           ├──RelOp: <
    │           │   ├──ID: i
    │           │   └──Num: 50
    │           └──Statements
    │               ├──If
    │               │   ├──RelOp: >
    │               │   │   ├──ID: x
    │               │   │   └──ID: y
    │               │   ├──Statements
    │               │   │   └──If
    │               │   │       ├──RelOp: <
    │               │   │       │   ├──ID: y
    │               │   │       │   └──ID: z
    │               │   │       ├──Statements
    │               │   │       │   └──If
    │               │   │       │       ├──RelOp: >
    │               │   │       │       │   ├──ID: z
    │               │   │       │       │   └──ID: x
    │               │   │       │       ├──Statements
    │               │   │       │       │   └──Call
    │               │   │       │       │       ├──ID: printResult
    │               │   │       │       │       └──ExpList
    │               │   │       │       │           └──BinOp: *
    │               │   │       │       │               ├──BinOp: *
    │               │   │       │       │               │   ├──ID: x
    │               │   │       │       │               │   └──ID: y
    │               │   │       │       │               └──ID: z
    │               │   │       │       └──Statements
    │               │   │       │           └──Call
    │               │   │       │               ├──ID: printResult
    │               │   │       │               └──ExpList
    │               │   │       │                   └──BinOp: +
    │               │   │       │                       ├──BinOp: +
    │               │   │       │                       │   ├──ID: x
    │               │   │       │                       │   └──ID: y
    │               │   │       │                       └──ID: z
    │               │   │       └──Statements
    │               │   │           └──Call
    │               │   │               ├──ID: printResult
    │               │   │               └──ExpList
    │               │   │                   └──BinOp: *
    │               │   │                       ├──BinOp: -
    │               │   │                       │   ├──ID: x
    │               │   │                       │   └──ID: y
    │               │   │                       └──BinOp: +
    │               │   │                           ├──ID: z
    │               │   │                           └──ID: x
    │               │   └──Statements
    │               │       └──If
    │               │           ├──RelOp: >
    │               │           │   ├──ID: z
    │               │           │   └──ID: y
    │               │           ├──Statements
    │               │           │   └──Call
    │               │           │       ├──ID: printResult
    │               │           │       └──ExpList
    │               │           │           └──BinOp: *
    │               │           │               ├──ID: z
    │               │           │               └──ID: z
    │               │           └──Statements
    │               │               └──Call
    │               │                   ├──ID: printResult
    │               │                   └──ExpList
    │               │                       └──BinOp: +
    │               │                           ├──ID: y
    │               │                           └──ID: y
    │               └──Assign
    │                   ├──ID: i
    │                   └──BinOp: +
    │                       ├──ID: i
    │                       └──Num: 1
    ├──FuncDecl
    │   ├──ID: complexCall
    │   ├──PrimitiveType: int
    │   ├──Formals
    │   │   ├──Formal
    │   │   │   ├──ID: c
    │   │   │   └──PrimitiveType: int
    │   │   ├──Formal
    │   │   │   ├──ID: b
    │   │   │   └──PrimitiveType: int
    │   │   └──Formal
    │   │       ├──ID: a
    │   │       └──PrimitiveType: int
    │   └──Statements
    │       └──Return
    │           └──BinOp: +
    │               ├──BinOp: /
    │               │   ├──BinOp: *
    │               │   │   ├──BinOp: +
    │               │   │   │   ├──ID: a
    │               │   │   │   └──ID: b
    │               │   │   └──BinOp: -
    │               │   │       ├──ID: c
    │               │   │       └──ID: b
    │               │   └──BinOp: +
    │               │       ├──ID: a
    │               │       └──ID: c
    │               └──BinOp: -
    │                   ├──BinOp: *
    │                   │   ├──ID: b
    │                   │   └──ID: c
    │                   └──BinOp: /
    │                       ├──ID: a
    │                       └──ID: c
    ├──FuncDecl
    │   ├──ID: testComplexCalls
    │   ├──PrimitiveType: void
    │   ├──Formals
    │   │   ├──Formal
    │   │   │   ├──ID: z
    │   │   │   └──PrimitiveType: int
    │   │   ├──Formal
    │   │   │   ├──ID: y
    │   │   │   └──PrimitiveType: int
    │   │   └──Formal
    │   │       ├──ID: x
    │   │       └──PrimitiveType: int
    │   └──Statements
    │       ├──VarDecl
    │       │   ├──ID: i
    │       │   ├──PrimitiveType: int
    │       │   └──Num: 0
    │       └──While
    │           ├──RelOp: <
    │           │   ├──ID: i
    │           │   └──Num: 100
    │           └──Statements
    │               ├──VarDecl
    │               │   ├──ID: result
    │               │   ├──PrimitiveType: int
    │               │   └──Call
    │               │       ├──ID: complexCall
    │               │       └──ExpList
    │               │           ├──ID: z
    │               │           ├──ID: y
    │               │           └──ID: x
    │               ├──Call
    │               │   ├──ID: printResult
    │               │   └──ExpList
    │               │       └──ID: result
    │               ├──Assign
    │               │   ├──ID: result
    │               │   └──Call
    │               │       ├──ID: complexCall
    │               │       └──ExpList
    │               │           ├──Call
    │               │           │   ├──ID: recursiveFibonacci
    │               │           │   └──ExpList
    │               │           │       └──ID: x
    │               │           ├──Call
    │               │           │   ├──ID: recursiveFactorial
    │               │           │   └──ExpList
    │               │           │       └──ID: y
    │               │           └──Call
    │               │               ├──ID: complexCall
    │               │               └──ExpList
    │               │                   ├──ID: z
    │               │                   ├──ID: y
    │               │                   └──ID: x
    │               ├──Call
    │               │   ├──ID: printResult
    │               │   └──ExpList
    │               │       └──ID: result
    │               └──Assign
    │                   ├──ID: i
    │                   └──BinOp: +
    │                       ├──ID: i
    │                       └──Num: 1
    ├──FuncDecl
    │   ├──ID: testPrimitiveTypeCasting
    │   ├──PrimitiveType: void
    │   ├──Formals
    │   └──Statements
    │       ├──VarDecl
    │       │   ├──ID: b
    │       │   ├──PrimitiveType: byte
    │       │   └──NumB: 2
    │       ├──VarDecl
    │       │   ├──ID: i
    │       │   ├──PrimitiveType: int
    │       │   └──Num: 0
    │       └──While
    │           ├──RelOp: <
    │           │   ├──ID: i
    │           │   └──Num: 100
    │           └──Statements
    │               ├──VarDecl
    │               │   ├──ID: x
    │               │   ├──PrimitiveType: int
    │               │   └──BinOp: +
    │               │       ├──Cast
    │               │       │   ├──ID: b
    │               │       │   └──PrimitiveType: int
    │               │       └──ID: i
    │               ├──Call
    │               │   ├──ID: printResult
    │               │   └──ExpList
    │               │       └──ID: x
    │               └──Assign
    │                   ├──ID: i
    │                   └──BinOp: +
    │                       ├──ID: i
    │                       └──Num: 1
    ├──FuncDecl
    │   ├──ID: testLongConditionals
    │   ├──PrimitiveType: void
    │   ├──Formals
    │   │   ├──Formal
    │   │   │   ├──ID: z
    │   │   │   └──PrimitiveType: int
    │   │   ├──Formal
    │   │   │   ├──ID: y
    │   │   │   └──PrimitiveType: int
    │   │   ├──Formal
    │   │   │   ├──ID: x
    │   │   │   └──PrimitiveType: int
    │   │   ├──Formal
    │   │   │   ├──ID: flag2
    │   │   │   └──PrimitiveType: bool
    │   │   └──Formal
    │   │       ├──ID: flag1
    │   │       └──PrimitiveType: bool
    │   └──Statements
    │       ├──VarDecl
    │       │   ├──ID: i
    │       │   ├──PrimitiveType: int
    │       │   └──Num: 0
    │       └──While
    │           ├──RelOp: <
    │           │   ├──ID: i
    │           │   └──Num: 100
    │           └──Statements
    │               ├──If
    │               │   ├──Or
    │               │   │   ├──Or
    │               │   │   │   ├──And
    │               │   │   │   │   ├──ID: flag1
    │               │   │   │   │   └──RelOp: >
    │               │   │   │   │       ├──BinOp: +
    │               │   │   │   │       │   ├──ID: x
    │               │   │   │   │       │   └──ID: y
    │               │   │   │   │       └──ID: z
    │               │   │   │   └──And
    │               │   │   │       ├──RelOp: <
    │               │   │   │       │   ├──BinOp: -
    │               │   │   │       │   │   ├──ID: y
    │               │   │   │       │   │   └──ID: z
    │               │   │   │       │   └──ID: x
    │               │   │   │       └──Not
    │               │   │   │           └──ID: flag2
    │               │   │   └──And
    │               │   │       ├──RelOp: >
    │               │   │       │   ├──ID: i
    │               │   │       │   └──ID: x
    │               │   │       └──RelOp: <=
    │               │   │           ├──ID: y
    │               │   │           └──ID: z
    │               │   ├──Statements
    │               │   │   └──Call
    │               │   │       ├──ID: print
    │               │   │       └──ExpList
    │               │   │           ├──ID: i
    │               │   │           └──String: Condition passed for i:
    │               │   └──Statements
    │               │       └──Call
    │               │           ├──ID: print
    │               │           └──ExpList
    │               │               ├──ID: i
    │               │               └──String: Condition failed for i:
    │               └──Assign
    │                   ├──ID: i
    │                   └──BinOp: +
    │                       ├──ID: i
    │                       └──Num: 1
    └──FuncDecl
        ├──ID: extendedTests
        ├──PrimitiveType: void
        ├──Formals
        │   ├──Formal
        │   │   ├──ID: z
        │   │   └──PrimitiveType: int
        │   ├──Formal
        │   │   ├──ID: y
        │   │   └──PrimitiveType: int
        │   └──Formal
        │       ├──ID: x
        │       └──PrimitiveType: int
        └──Statements
            ├──VarDecl
            │   ├──ID: i
            │   ├──PrimitiveType: int
            │   └──Num: 0
            └──While
                ├──RelOp: <
                │   ├──ID: i
                │   └──Num: 50
                └──Statements
                    ├──Call
                    │   ├──ID: fullTestSuite
                    │   └──ExpList
                    │       ├──Bool: false
                    │       ├──Bool: true
                    │       ├──NumB: 5
                    │       ├──NumB: 3
                    │       ├──BinOp: +
                    │       │   ├──ID: z
                    │       │   └──ID: i
                    │       ├──BinOp: -
                    │       │   ├──ID: y
                    │       │   └──ID: i
                    │       └──BinOp: +
                    │           ├──ID: x
                    │           └──ID: i
                    └──Assign
                        ├──ID: i
                        └──BinOp: +
                            ├──ID: i
                            └──Num: 1
