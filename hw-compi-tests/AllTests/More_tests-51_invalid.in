// Entry point of the precedence test program
int main() {
    print("Starting precedence stress test...");

    // Initialize variables for testing
    int a = 10;
    int b = 20;
    int c = 30;
    int d = 40;
    byte e = 5b;
    byte f = 7b;
    bool flag1 = true;
    bool flag2 = false;

    // Run precedence tests
    testArithmeticPrecedence(a, b, c, d, e, f);
    testLogicalPrecedence(flag1, flag2, a, b, c);
    testRelationalPrecedence(a, b, c, d);
    testMixedPrecedence(a, b, c, d, e, f, flag1, flag2);

    return 0;
}

// Test precedence of arithmetic operators
void testArithmeticPrecedence(int a, int b, int c, int d, byte e, byte f) {
    int result = 0;

    // Simple precedence checks
    result = a + b * c; // Multiplication before addition
    print("Result 1:", result);

    result = (a + b) * c; // Parentheses override precedence
    print("Result 2:", result);

    result = a * b - c / d; // Mixed *, /, -
    print("Result 3:", result);

    // Complex nested arithmetic
    result = (a + b) * (c - d) / (e + f);
    print("Result 4:", result);

    result = a + b * c - d / e + f; // Combine all operators
    print("Result 5:", result);

    result = ((a * b) + c) / ((d - e) * f); // Deeply nested
    print("Result 6:", result);

    result = ((a + (b * c)) / d) - ((e + f) * a);
    print("Result 7:", result);
}

// Test precedence of logical operators
void testLogicalPrecedence(bool flag1, bool flag2, int a, int b, int c) {
    bool result;

    // Logical AND before OR
    result = flag1 and flag2 or a > b;
    print("Logical Result 1:", result);

    // Parentheses for precedence
    result = (flag1 and (flag2 or a > b));
    print("Logical Result 2:", result);

    // NOT has highest precedence
    result = not flag1 or flag2 and a < b;
    print("Logical Result 3:", result);

    // Mixing NOT with AND/OR
    result = not (flag1 and flag2) or (a > b and c > a);
    print("Logical Result 4:", result);

    // Nested logical expressions
    result = (not flag1 or not flag2) and (a > b or b < c);
    print("Logical Result 5:", result);
}

// Test precedence of relational operators
void testRelationalPrecedence(int a, int b, int c, int d) {
    bool result;

    // Relational precedence check
    result = a < b and b < c; // Logical AND after relational
    print("Relational Result 1:", result);

    result = a + b < c - d; // Arithmetic before relational
    print("Relational Result 2:", result);

    result = (a * b) >= (c / d) or (a == b);
    print("Relational Result 3:", result);

    // Combining multiple relational operators
    result = (a > b) and (b <= c) or (c != d);
    print("Relational Result 4:", result);

    // Nested relational expressions
    result = ((a + b) > (c - d)) and ((a * c) <= (b / d));
    print("Relational Result 5:", result);
}

// Test precedence with mixed operators
void testMixedPrecedence(int a, int b, int c, int d, byte e, byte f, bool flag1, bool flag2) {
    int result;
    bool logicalResult;

    // Mixed arithmetic and logical
    result = a + b * c - d / e + f;
    logicalResult = (result > a) and not (flag1 or flag2);
    print("Mixed Result 1:", result, "Logical:", logicalResult);

    // Logical with relational and arithmetic
    logicalResult = ((a + b) > (c - d)) and (e * f < d) or not flag1;
    print("Mixed Logical Result 2:", logicalResult);

    // Deeply nested mixed operators
    result = (((a + b) * ((c - d)) / (e + f)) - (a * c) + b;
    logicalResult = not (result > a) or (flag1 and (flag2 or a < b));
    print("Mixed Result 3:", result, "Logical:", logicalResult);

    // Extremely complex mixed precedence
    result = (((a + b) * c) - ((d / e) + f)) * ((a - b) + (c * d)) / f;
    logicalResult = (result > a and not flag1) or (flag2 and ((b + c) < d));
    print("Mixed Result 4:", result, "Logical:", logicalResult);
}
